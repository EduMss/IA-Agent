from utils.git_integration import clone_repo
from utils.json_treatment import convert_analysis_to_sonarqube
from utils.pdf_reader import extract_text_and_images
from utils.embedding import get_embedding
from utils.chroma_client import add_to_chroma, query_chroma, delete_from_chroma
from utils import llm_integration
from utils.check import check_environment_variables
from models.schemas import AnalyzeRequest, AnalysisResponse
from core.analysis import get_project_files, consolidate_analysis, generate_project_tree, convert_path_to_project
from core.sonar_integration import get_sonar_issues, run_sonar_scanner
from config import OLLAMA_URL, CHUNK_SIZE, CHUNK_OVERLAP, MODEL_CHAT, LOGS_DIR, SONAR_TOKEN, SONAR_URL
from pathlib import Path
from fastapi import FastAPI, HTTPException, UploadFile, File, Form
from contextlib import asynccontextmanager
import requests
import logging
import json
import time

# Verificar se as variaveis importante est√£o configuradas!
@asynccontextmanager
async def lifespan(app: FastAPI):
    # üöÄ Checagem no startup
    check_environment_variables()
    print("‚úîÔ∏è Vari√°veis de ambiente validadas. API iniciando.")
    yield
    # üßπ Aqui seria o shutdown se quisesse
    print("üõë API sendo desligada.")


# Passando o lifespan para ele executar antes de iniciar a aplica√ß√£o
app = FastAPI(lifespan=lifespan)

# Criando diretorio log
Path(LOGS_DIR).mkdir(parents=True, exist_ok=True)

# Configura√ß√£o b√°sica de logging
logging.basicConfig(
    filename='logs/analysis.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    force=True  # <- sobrescreve qualquer configura√ß√£o anterior de logging
)

#Enviar arquivo para a base de dados
@app.post("/upload-pdf")
async def upload_pdf(file: UploadFile = File(...), description: str = Form(...)):
    try:
        file_name = file.filename

        # Remove dados antigos do arquivo, se existirem
        delete_from_chroma(file_name)

        # extrair conteudo do pdf e transformar em texto para a base de dados
        content = extract_text_and_images(file.file, file_name, description)
        
        if not content.strip():
            return {"error": "N√£o foi poss√≠vel extrair texto do PDF."}

        print(f"Conteudo gerado apartir do pdf: {file_name}\nDescri√ß√£o forncida pelo usu√°rio: {description}\n\n{content}")

        # dividindo o conteudo do pdf em peda√ßos menores para ser armazenado na base de dados
        chunks = [content[i:i+CHUNK_SIZE] for i in range(0, len(content), CHUNK_SIZE - CHUNK_OVERLAP)]
        
        # Convertendo o conteudo do chunk para embedding e armazenando na base de dados
        for idx, chunk in enumerate(chunks):
            embedding = get_embedding(chunk)
            add_to_chroma(f"{file_name}_chunk_{idx}", chunk, embedding, file_name)
        
        return {"status": f"PDF '{file_name}' processado e salvo no ChromaDB"}
    except:
        return {"status": f"Erro ao enviar o arquivo '{file_name}' para a base de dados."}

# Perguntar para obter respostar de acordo com as informa√ß√µes da base de dados
@app.post("/ask")
async def ask_question(question: str = Form(...)):
    question_embedding = get_embedding(question)
    results = query_chroma(question_embedding)
    
    context = "\n\n".join(results["documents"][0])
    
    prompt = f"""
    Voc√™ √© um assistente inteligente. Utilize apenas o contexto fornecido abaixo para responder de forma precisa, clara e objetiva.

    Se o contexto contiver descri√ß√µes de imagens ou informa√ß√µes provenientes de OCR, **utilize-as apenas se forem √∫teis e relevantes para responder √† pergunta**. Ignore qualquer dado irrelevante, como carimbos, assinaturas, marcas visuais ou elementos que n√£o acrescentem informa√ß√£o direta √† resposta.

    Ao utilizar informa√ß√µes de descri√ß√µes de imagens, **evite express√µes como "a imagem acima", "como visto na imagem", "A descri√ß√£o da imagem apresentada" ou qualquer refer√™ncia posicional**, pois o usu√°rio n√£o tem acesso √†s imagens ‚Äî apenas ao texto extra√≠do da base de dados. Portanto, apresente a informa√ß√£o de forma direta, clara e independente da posi√ß√£o ou da exist√™ncia da imagem.

    Quando houver um texto na imagem, ela estar√° delimitada da seguinte forma:
    - üü© **In√≠cio do texto:** `[Texto encontrado na imagem (OCR) ‚Äî use apenas se for relevante]`
    - üü• **Fim do texto:** `[Fim do Texto encontrado na imagem]`

    Quando houver uma descri√ß√£o de imagem, ela estar√° delimitada da seguinte forma:
    - üü© **In√≠cio da descri√ß√£o:** `[Descri√ß√£o da imagem, descri√ß√£o gerada pela IA ‚Äî use apenas se for relevante]`
    - üü• **Fim da descri√ß√£o:** `[Fim da descri√ß√£o da imagem]`

    ‚Üí Esse conte√∫do pode ou n√£o ser relevante para responder √† pergunta. **Tenha cuidado ao utiliz√°-lo, considerando se realmente contribui para uma resposta √∫til e correta.**  
    **Aten√ß√£o:** Certifique-se de n√£o descartar informa√ß√µes al√©m das descri√ß√µes de imagem. Avalie cuidadosamente o que √© relevante e o que n√£o √©.

    Nunca invente informa√ß√µes. Responda apenas com base no contexto fornecido.  
    Se n√£o encontrar uma resposta no contexto, informe claramente que a informa√ß√£o n√£o est√° dispon√≠vel.

    Lembre-se: se a resposta n√£o estiver presente no contexto fornecido, n√£o tente adivinhar, inventar ou gerar informa√ß√µes externas.
    
    ------------------------------

    O contexto a seguir foi extra√≠do de manuais t√©cnicos, onde podem estar presentes etapas, comandos, caminhos de arquivos e procedimentos. Leia com aten√ß√£o, mesmo que a formata√ß√£o ou estrutura n√£o esteja perfeita.

    üìÑ Contexto:
    {context}
    ------------------------------

    ‚ùì Pergunta:
    {question}

    üí° Responda de forma completa e clara em portugu√™s:
    """
    response = requests.post(f"{OLLAMA_URL}/api/generate", json={
        "model": MODEL_CHAT,
        "prompt": prompt,
        "stream": False
    })
    response.raise_for_status()
    answer = response.json()["response"]
    return {"answer": answer}


@app.get("/health")
async def health():
    return {"status": "API rodando"}


@app.post("/analyze", response_model=AnalysisResponse)
async def analyze_code(request: AnalyzeRequest):
    try:
        logging.info("=== INICIANDO ANALISE ===")

        # Inicio Timer
        start_time = time.time() 

        # Clonando repositorio Git
        project_path = clone_repo(repo_url=request.project_git_url, branch=request.project_git_branch)

        # Obtendo a estrutura do projeto
        project_struct = generate_project_tree(project_path)

        # Prompt para o modelo LLM entender oque √© para fazer com o codigo fornecido
        prompt = f"""
üö® SUA TAREFA:
Voc√™ √© um analista de c√≥digo s√™nior altamente especializado. Sua miss√£o √© analisar criticamente o c√≥digo fornecido e IDENTIFICAR problemas de forma clara, objetiva e direta.

‚ö†Ô∏è O QUE VOC√ä **N√ÉO DEVE FAZER**:
- üö´ N√ÉO gere documenta√ß√£o.
- üö´ N√ÉO descreva funcionalidades.
- üö´ N√ÉO explique como a fun√ß√£o ou o componente funciona.
- üö´ N√ÉO gere steps, passos ou fluxogramas.
- üö´ N√ÉO gere tabelas.
- üö´ N√ÉO explique par√¢metros, tipos, props ou m√©todos.
- üö´ N√ÉO descreva comportamentos esperados do c√≥digo.
- üö´ N√ÉO elogie o c√≥digo.
- üö´ N√ÉO sugira melhorias que envolvam est√©tica, padr√µes, boas pr√°ticas ou coment√°rios.
- üö´ N√ÉO gere nenhum texto fora do JSON.

‚ö†Ô∏è O QUE VOC√ä DEVE FAZER:
- ‚úîÔ∏è Identificar problemas de:
  - Qualidade de c√≥digo
  - Bugs
  - Erros de l√≥gica
  - Vulnerabilidades de seguran√ßa
  - Problemas de performance
  - Problemas de manutenibilidade
  - Problemas de confiabilidade
- ‚úîÔ∏è Indicar o arquivo e a linha exata ou intervalo onde o problema ocorre.
- ‚úîÔ∏è Sugerir uma solu√ß√£o pr√°tica e direta no campo `"recommendation"`.

Respostas em portugu√™s!!

üüß FORMATO OBRIGAT√ìRIO DA RESPOSTA ‚Äî EXCLUSIVAMENTE ASSIM:
- Um **array JSON** contendo objetos com os seguintes campos obrigat√≥rios:

[
  {{
    "id": "string",
    "severity": "MINOR|MAJOR|HIGH|CRITICAL|BLOCKER|INFO",
    "category": "CODE_QUALITY|BUG|LOGIC|SECURITY|PERFORMANCE|MAINTAINABILITY|RELIABILITY",
    "description": "string",
    "file": "string",
    "line": "string",
    "recommendation": "string"
  }}
]

üüß EXEMPLO DE COMO INFORMAR LINHAS:
- Para uma √∫nica linha: "line": "10"
- Para um intervalo: "line": "10-15"

üõë N√ÉO inclua nenhuma chave externa como "issues", "problems", "data" ou qualquer outro wrapper.
üõë N√ÉO inclua coment√°rios, descri√ß√µes adicionais, texto fora do JSON.
üõë SE N√ÉO HOUVER PROBLEMAS NO C√ìDIGO, retorne um array vazio: []. Nada al√©m disso.

====== Estrutura do projeto ======
{project_struct}
====== Fim da estrutura do projeto ======

"""
        # Obtendo todos os arquivos do projeto
        project_files = get_project_files(project_path)

        # Criando lista vazia onde ser√° armazenada todos os resultados do LLM
        all_analysis = []

        files_count = 0
        project_total_files = len(project_files)
        files_name = ""

        # Obtendo todos os arquivos que ser√£o processados
        for file_path in project_files:
            file_path = convert_path_to_project(project_path=project_path, file_path=file_path)
            files_name += f"{file_path}\n"

        # Remover o ultimo "\n"
        files_name = files_name.rstrip('\n')

        # Adicionando o n√∫mero de linhas a esquerda do texto para auxiliar a quantidade de arquivos
        files_name_lines = files_name.split('\n')
        files_name = '\n'.join(f'{idx + 1:>4} | {line}' for idx, line in enumerate(files_name_lines))

        # Adicionando log 
        logging.info(f"====Arquivos que ser√£o analisados====\n{files_name}\n=====================================")
        logging.info("=== RESPOSTA BRUTA ===")

        # Ignorar a etapa de buscar issues do SonarQube caso n√£o estejam configuradas as vari√°veis de ambiente do SonarQube
        issues_list = []
        if SONAR_URL == "":
            print("Ignorando etapa de integra√ß√£o com o SonarQube. Defina a URL do SonarQube na vari√°vel de ambiente SONAR_URL")
            logging.warning("Ignorando etapa de integra√ß√£o com o SonarQube. Defina a URL do SonarQube na vari√°vel de ambiente SONAR_URL")
        elif SONAR_TOKEN == "":
            print("Ignorando etapa de integra√ß√£o com o SonarQube. Defina o Token do SonarQube na vari√°vel de ambiente SONAR_TOKEN")
            logging.warning("Ignorando etapa de integra√ß√£o com o SonarQube. Defina o Token do SonarQube na vari√°vel de ambiente SONAR_TOKEN")
        else:
            # Obtendo issues que foiram enocntradas pelo modelo salvo no sonar
            issues_list = get_sonar_issues(project_key=request.sonar_project_key)

        # Processar cada arquivo individualmente
        # for file_path in project_files[:1]:  # Limita a 3 arquivos para teste
        for file_path in project_files:  # Analisar todos os arquivos do projeto

            # Inicio Timer
            start_time_current_file = time.time() 

            # Contador do arquivos atual
            files_count += 1            
            try:
                logging.info(f"=== Iniciando Valida√ß√£o do arquivo {file_path} ===\n=== Arquivos {files_count}/{project_total_files} ===")
                
                # Analisar com Ollama
                analysis = llm_integration.analyze_with_ollama(prompt=prompt, file_path=file_path, project_path=project_path, analysis=issues_list)

                # Adicionando json gerado pelo LLM na lista
                all_analysis.append(analysis)

                #Adicionando LOG
                logging.info(json.dumps(analysis, indent=2))

                # Obtendo o tempo atual para calcular o tempo levado para processar o arquivo
                end_time = time.time()  # Fim do timer
                duration = end_time - start_time_current_file  # Tempo decorrido em segundos

                # Convertendo o diretorio do arquivo para ficar mais legivel
                file_path = convert_path_to_project(project_path=project_path, file_path=file_path)

                # Adicionando LOG do tempo da analise
                logging.info(f"‚úÖ An√°lise do arquivo '{file_path}' conclu√≠da em {duration:.2f} segundos")
                
            except Exception as e:
                logging.error(f"Erro ao analisar {file_path}: {str(e)}")
        
        # Juntando todas as respostas do LLM que est√° na lista para um unico json
        response = consolidate_analysis(analysis_list=all_analysis, start_time=start_time, project_path=project_path)

        # Verificar se as variaveis de ambiente do SonarQube est√£o configuradas, se n√£o, nem tenta executar a parte de integra√ß√£o com SonarQube
        if SONAR_URL == "":
            print("Ignorando etapa de integra√ß√£o com o SonarQube. Defina a URL do SonarQube na vari√°vel de ambiente SONAR_URL")
            logging.warning("Ignorando etapa de integra√ß√£o com o SonarQube. Defina a URL do SonarQube na vari√°vel de ambiente SONAR_URL")
        elif SONAR_TOKEN == "":
            print("Ignorando etapa de integra√ß√£o com o SonarQube. Defina o Token do SonarQube na vari√°vel de ambiente SONAR_TOKEN")
            logging.warning("Ignorando etapa de integra√ß√£o com o SonarQube. Defina o Token do SonarQube na vari√°vel de ambiente SONAR_TOKEN")
        else:
            # Converter o json padr√£o para o json que o SonarQube aceita
            json_sonarqube = convert_analysis_to_sonarqube(response['analysis'])   

            # Adicionar o arquivo json no projeto
            # Salvar o arquivo das issues no diretorio do projeto
            json_issues_path = Path(project_path) / "external-issues.json"
            with open(json_issues_path, 'w', encoding='utf-8') as f:
                json.dump(json_sonarqube, f, ensure_ascii=False)

            # Integra√ß√£o com o sonarqube para enviar as issues
            run_sonar_scanner(project_key=request.sonar_project_key, project_dir=Path(project_path))

        # Adicionando LOG
        logging.info("=== RESPOSTA VALIDADA ===")
        logging.info(response)

        return response
        
    except Exception as e:
        logging.error(f"Erro durante an√°lise: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))



if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)